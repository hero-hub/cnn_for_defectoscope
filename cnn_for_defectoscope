{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "67370413",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:06:36.837352Z",
     "iopub.status.busy": "2025-07-09T13:06:36.836647Z",
     "iopub.status.idle": "2025-07-09T13:06:59.497571Z",
     "shell.execute_reply": "2025-07-09T13:06:59.496966Z"
    },
    "papermill": {
     "duration": 22.665925,
     "end_time": "2025-07-09T13:06:59.499055",
     "exception": false,
     "start_time": "2025-07-09T13:06:36.833130",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-07-09 13:06:39.877614: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1752066400.256089      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1752066400.364818      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa136398",
   "metadata": {
    "papermill": {
     "duration": 0.001967,
     "end_time": "2025-07-09T13:06:59.503885",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.501918",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Функция для загрузки данных с метками на основе номеров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "519c7fd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:06:59.509205Z",
     "iopub.status.busy": "2025-07-09T13:06:59.508766Z",
     "iopub.status.idle": "2025-07-09T13:06:59.514270Z",
     "shell.execute_reply": "2025-07-09T13:06:59.513740Z"
    },
    "papermill": {
     "duration": 0.009252,
     "end_time": "2025-07-09T13:06:59.515262",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.506010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_data(data_dir):\n",
    "    signals = []\n",
    "    labels = []\n",
    "    defect_signals = set(range(99, 110)) - {100}  # Сигналы 99, 101–109 с дефектом\n",
    "    for filename in os.listdir(data_dir):\n",
    "        if filename.endswith('.txt'):\n",
    "            try:\n",
    "                number = int(filename.split('.txt')[0])\n",
    "                path = os.path.join(data_dir, filename)\n",
    "                data = np.loadtxt(path, delimiter=';')[:, 1]\n",
    "                # Берем только диапазон 3400:4080\n",
    "                signal_segment = data[3400:4080]  # диапазон от 20 до 24 мкс\n",
    "                label = 1 if number in defect_signals else 0\n",
    "                signals.append(signal_segment)\n",
    "                labels.append(label)\n",
    "                \n",
    "            except ValueError as e:\n",
    "                print(f\"Ошибка в файле {filename}: {e}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Не удалось загрузить {filename}: {e}\")\n",
    "    print(f\"Загружено сигналов: {len(signals)}, меток: {len(labels)}\")\n",
    "    return signals, labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cd72c56",
   "metadata": {
    "papermill": {
     "duration": 0.002021,
     "end_time": "2025-07-09T13:06:59.519485",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.517464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Аугментация данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ead0b318",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:06:59.524631Z",
     "iopub.status.busy": "2025-07-09T13:06:59.524414Z",
     "iopub.status.idle": "2025-07-09T13:06:59.528112Z",
     "shell.execute_reply": "2025-07-09T13:06:59.527609Z"
    },
    "papermill": {
     "duration": 0.007368,
     "end_time": "2025-07-09T13:06:59.529070",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.521702",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def augment_data(signals, labels, noise_level=0.01):\n",
    "    augmented_signals = []\n",
    "    augmented_labels = []\n",
    "    for signal, label in zip(signals, labels):\n",
    "        noise = np.random.normal(0, noise_level, signal.shape)\n",
    "        augmented_signals.append(signal + noise)\n",
    "        augmented_labels.append(label)\n",
    "    return np.array(augmented_signals), np.array(augmented_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "633ff0d7",
   "metadata": {
    "papermill": {
     "duration": 0.00201,
     "end_time": "2025-07-09T13:06:59.533258",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.531248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Загрузка, преобразование данных и построение модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a88f3d2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-09T13:06:59.538114Z",
     "iopub.status.busy": "2025-07-09T13:06:59.537892Z",
     "iopub.status.idle": "2025-07-09T13:07:06.253899Z",
     "shell.execute_reply": "2025-07-09T13:07:06.253284Z"
    },
    "papermill": {
     "duration": 6.719891,
     "end_time": "2025-07-09T13:07:06.255197",
     "exception": false,
     "start_time": "2025-07-09T13:06:59.535306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Загружено сигналов: 144, меток: 144\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1752066424.546550      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1752066424.547232      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "data_dir = '/kaggle/input/signals/хор'\n",
    "signals, labels = load_data(data_dir)\n",
    "augmented_matrices, augmented_labels = augment_data(signals, labels)\n",
    "\n",
    "# Преобразование данных для модели\n",
    "augmented_matrices = np.array(augmented_matrices).reshape((augmented_matrices.shape[0], augmented_matrices.shape[1], 1))\n",
    "augmented_labels = np.array(augmented_labels)\n",
    "\n",
    "# Построение модели\n",
    "model = models.Sequential([\n",
    "    layers.Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=(680, 1)),  # 4080 - 3400 = 680\n",
    "    layers.MaxPooling1D(pool_size=2),\n",
    "    layers.Conv1D(filters=64, kernel_size=3, activation='relu'),\n",
    "    layers.MaxPooling1D(pool_size=2),\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(128, activation='relu'),\n",
    "    layers.Dropout(0.5),\n",
    "    layers.Dense(1, activation='sigmoid')\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "942a717d",
   "metadata": {
    "papermill": {
     "duration": 0.00211,
     "end_time": "2025-07-09T13:07:06.259919",
     "exception": false,
     "start_time": "2025-07-09T13:07:06.257809",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Компиляция и обучение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30cecea4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:07:06.265623Z",
     "iopub.status.busy": "2025-07-09T13:07:06.265197Z",
     "iopub.status.idle": "2025-07-09T13:07:14.359314Z",
     "shell.execute_reply": "2025-07-09T13:07:14.358650Z"
    },
    "papermill": {
     "duration": 8.098153,
     "end_time": "2025-07-09T13:07:14.360459",
     "exception": false,
     "start_time": "2025-07-09T13:07:06.262306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1752066428.343265      62 service.cc:148] XLA service 0x7bdef8006510 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1752066428.344464      62 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1752066428.344484      62 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1752066428.705316      62 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/4\u001b[0m \u001b[32m━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━\u001b[0m \u001b[1m15s\u001b[0m 5s/step - accuracy: 0.5312 - loss: 0.9538"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1752066431.512757      62 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 656ms/step - accuracy: 0.7440 - loss: 0.8269 - val_accuracy: 0.9310 - val_loss: 0.2658\n",
      "Epoch 2/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9430 - loss: 0.7094 - val_accuracy: 0.9310 - val_loss: 0.2544\n",
      "Epoch 3/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9295 - loss: 0.5590 - val_accuracy: 0.9310 - val_loss: 0.3260\n",
      "Epoch 4/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step - accuracy: 0.9354 - loss: 0.5106 - val_accuracy: 0.9310 - val_loss: 0.3167\n",
      "Epoch 5/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step - accuracy: 0.9406 - loss: 0.5704 - val_accuracy: 0.9655 - val_loss: 0.2728\n",
      "Epoch 6/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9663 - loss: 0.3835 - val_accuracy: 0.9310 - val_loss: 0.2253\n",
      "Epoch 7/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9566 - loss: 0.4114 - val_accuracy: 0.9655 - val_loss: 0.2315\n",
      "Epoch 8/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9503 - loss: 0.3310 - val_accuracy: 0.9655 - val_loss: 0.2275\n",
      "Epoch 9/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 0.9496 - loss: 0.3561 - val_accuracy: 0.9655 - val_loss: 0.2260\n",
      "Epoch 10/10\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.9528 - loss: 0.2844 - val_accuracy: 0.9655 - val_loss: 0.2352\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7bdfe42c2690>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Компиляция модели\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Обучение\n",
    "model.fit(augmented_matrices, augmented_labels, epochs=10, batch_size=32, validation_split=0.2, class_weight={0: 1, 1: 5})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c155aa75",
   "metadata": {
    "papermill": {
     "duration": 0.003784,
     "end_time": "2025-07-09T13:07:14.368352",
     "exception": false,
     "start_time": "2025-07-09T13:07:14.364568",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Сохранение модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b9c05b38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:07:14.376573Z",
     "iopub.status.busy": "2025-07-09T13:07:14.376342Z",
     "iopub.status.idle": "2025-07-09T13:07:14.451164Z",
     "shell.execute_reply": "2025-07-09T13:07:14.450579Z"
    },
    "papermill": {
     "duration": 0.080331,
     "end_time": "2025-07-09T13:07:14.452484",
     "exception": false,
     "start_time": "2025-07-09T13:07:14.372153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.save('/kaggle/working/defect_cnn_model.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1b8ca54",
   "metadata": {
    "papermill": {
     "duration": 0.003498,
     "end_time": "2025-07-09T13:07:14.459868",
     "exception": false,
     "start_time": "2025-07-09T13:07:14.456370",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Предсказание дефекта "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7577b14b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-09T13:07:14.467955Z",
     "iopub.status.busy": "2025-07-09T13:07:14.467709Z",
     "iopub.status.idle": "2025-07-09T13:07:27.681099Z",
     "shell.execute_reply": "2025-07-09T13:07:27.680231Z"
    },
    "papermill": {
     "duration": 13.218615,
     "end_time": "2025-07-09T13:07:27.682242",
     "exception": false,
     "start_time": "2025-07-09T13:07:14.463627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Итоговые результаты:\n",
      "Файл 105.txt: Дефект\n",
      "Файл 106.txt: Дефект\n",
      "Файл 108.txt: Дефект\n",
      "Файл 98.txt: Дефект\n",
      "Файл 107.txt: Дефект\n",
      "Файл 100.txt: Дефект\n",
      "Файл 103.txt: Дефект\n",
      "Файл 102.txt: Дефект\n",
      "Файл 101.txt: Дефект\n",
      "Файл 99.txt: Дефект\n",
      "Файл 104.txt: Дефект\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import os\n",
    "\n",
    "model_path = '/kaggle/working/defect_cnn_model.h5'\n",
    "model = tf.keras.models.load_model(model_path)\n",
    "\n",
    "test_data_dir = '/kaggle/input/signals-with-defect/defect'\n",
    "\n",
    "# Функция для загрузки и предсказания\n",
    "def predict_defects(data_dir, model):\n",
    "    predictions = []\n",
    "    filenames = []\n",
    "    for filename in os.listdir(data_dir):\n",
    "        if filename.endswith('.txt'):\n",
    "            try:\n",
    "                path = os.path.join(data_dir, filename)\n",
    "                data = np.loadtxt(path, delimiter=';')[:, 1] \n",
    "                signal_segment = data[3400:4080]\n",
    "                # Подготовка данных для модели\n",
    "                input_data = np.array([signal_segment]).reshape((1, 680, 1))\n",
    "                    \n",
    "                # Предсказание\n",
    "                prediction = model.predict(input_data, verbose=0)\n",
    "                predicted_class = 1 if prediction[0][0] > 0.5 else 0\n",
    "                predictions.append(predicted_class)\n",
    "                filenames.append(filename)\n",
    "                \n",
    "            except ValueError as e:\n",
    "                print(f\"Ошибка в файле {filename}: {e}\")\n",
    "            except Exception as e:\n",
    "                print(f\"Не удалось загрузить {filename}: {e}\")\n",
    "    return filenames, predictions\n",
    "\n",
    "# Выполнение предсказаний\n",
    "filenames, predictions = predict_defects(test_data_dir, model)\n",
    "\n",
    "# Вывод результатов\n",
    "print(\"\\nИтоговые результаты:\")\n",
    "for filename, pred in zip(filenames, predictions):\n",
    "    if pred == 1: print(f\"Файл {filename}: {'Дефект'}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 7819275,
     "sourceId": 12399437,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 7832109,
     "sourceId": 12418166,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 59.86154,
   "end_time": "2025-07-09T13:07:31.123949",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-09T13:06:31.262409",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
